#
# Vivado (TM) v2015.3 (64-bit)
#
# build_project.tcl: Tcl script for re-creating project 'FreeSRP'
#
# Generated by Vivado on Sat Nov 14 18:25:55 CET 2015
# IP Build 1367837 on Mon Sep 28 08:56:14 MDT 2015
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir [file dirname [info script]]

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

variable script_file
set script_file "build_project.tcl"

# Help information for this script
proc help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < [llength $::argc]} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir" { incr i; set origin_dir [lindex $::argv $i] }
      "--help"       { help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

set part "xc7a50tftg256-1"

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Create project
create_project FreeSRP $origin_dir/work/FreeSRP

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [get_projects FreeSRP]
set_property "default_lib" "xil_defaultlib" $obj
set_property "part" "$part" $obj
set_property "sim.ip.auto_export_scripts" "1" $obj
set_property "simulator_language" "Mixed" $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Files
set rtl [list \
    "slave_fifo_2b.v"\
    "ad9364_fake_if.v"\
    "gpif_wrapper.v"\
    "freesrp_top.v"\
    "ad_cmos_out.v"\
    "ad_cmos_in.v"\
    "ad9364_dev_if.v"\
    "fx3_uart_if.v"\
    "fx3_if_router.v"\
]

set testbenches [list \
    "gpif_tb.v"\
    "ad9364_tb.v"\
    "uart_tb.v"\
]

set ip [list \
    "ad9364_fake_clk"\
    "gpif_clk_gen"\
    "dds_compiler_0"\
]

set constraints [list \
    "io_1"\
    "timing_1"\
    "debug_1"\
]

set blockdesigns [list \
    "fifo_subsystem"\
    "mb_subsystem"\
]

set sources_top "freesrp_top"
set target_constraint "debug_1"

set microblaze_elf "$origin_dir/work_sdk/freesrp/Debug/freesrp.elf"

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files ""

foreach filename $rtl {
    lappend files "[file normalize "$origin_dir/src/rtl/$filename"]"
}

foreach xci $ip {
    lappend files "[file normalize "$origin_dir/src/ip/$xci/$xci.xci"]"
}

lappend files $microblaze_elf

add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
foreach xci $ip {
    set file "$origin_dir/src/ip/$xci/$xci.xci"
    set file [file normalize $file]
    set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
    if { ![get_property "is_locked" $file_obj] } {
        set_property "generate_synth_checkpoint" "0" $file_obj
    }
}

set file $microblaze_elf
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property "scoped_to_cells" "microblaze_0" $file_obj
set_property "scoped_to_ref" "mb_subsystem" $file_obj
set_property "used_in" "implementation" $file_obj
set_property "used_in_simulation" "0" $file_obj

# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property "top" $sources_top $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
foreach constraint $constraints {
    set file "[file normalize "$origin_dir/src/constraints/$constraint.xdc"]"
    set file_added [add_files -norecurse -fileset $obj $file]
    set file "$origin_dir/src/constraints/$constraint.xdc"
    set file [file normalize $file]
    set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
    set_property "file_type" "XDC" $file_obj
}

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]
set_property "target_constrs_file" "$orig_proj_dir/src/constraints/$target_constraint.xdc" $obj

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files ""

foreach filename $testbenches {
    lappend files "[file normalize "$origin_dir/src/testbench/$filename"]"
}
lappend files $microblaze_elf

add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file $microblaze_elf
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property "scoped_to_cells" "microblaze_0" $file_obj
set_property "scoped_to_ref" "mb_subsystem" $file_obj
set_property "used_in" "simulation" $file_obj
set_property "used_in_implementation" "0" $file_obj

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property "top" "gpif_tb" $obj
set_property "xelab.nosort" "1" $obj
set_property "xelab.unifast" "" $obj

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
  create_run -name synth_1 -part $part -flow {Vivado Synthesis 2016} -strategy "Vivado Synthesis Defaults" -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2016" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property "part" "$part" $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
  create_run -name impl_1 -part $part -flow {Vivado Implementation 2016} -strategy "Performance_ExplorePostRoutePhysOpt" -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Performance_ExplorePostRoutePhysOpt" [get_runs impl_1]
  set_property flow "Vivado Implementation 2016" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property "part" "$part" $obj
set_property "steps.opt_design.args.directive" "Explore" $obj
set_property "steps.place_design.args.directive" "Explore" $obj
set_property "steps.phys_opt_design.is_enabled" "1" $obj
set_property "steps.phys_opt_design.args.directive" "Explore" $obj
set_property "steps.route_design.args.directive" "Explore" $obj
set_property -name {steps.route_design.args.more options} -value {-tns_cleanup} -objects $obj
set_property "steps.post_route_phys_opt_design.is_enabled" "1" $obj
set_property "steps.post_route_phys_opt_design.args.directive" "Explore" $obj
set_property "steps.write_bitstream.args.readback_file" "0" $obj
set_property "steps.write_bitstream.args.verbose" "0" $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

# Create block designs & generate wrappers
foreach filename $blockdesigns {
    source $origin_dir/src/bd/$filename.tcl
    make_wrapper -files [get_files "$filename.bd"] -top -import
}

puts "INFO: Project created: FreeSRP"
